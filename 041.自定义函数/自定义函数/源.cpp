#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
//定义函数，求两个数的较大值
int get_max(int x, int y)
{
	if (x > y)
		return x;
	else
		return y;
}
//自定义函数，交换整型变量的值
//x,y的地址与传入a,b的地址不同。x,y的值交换与a,b的值无关，导致a,b的值无法交换
//当实参传给形参的时候，形参实例化其实是实参的一份临时拷贝，对形参的修改是不会改变实参的
void Swap1(int x, int y)  //void表示没有返回值
{
	int tmp = 0;
	tmp = x;
	x = y;
	y = tmp;
}

void Swap2(int* pa, int* pb)//形式参数
{
	int tmp = 0;
	tmp = *pa;
	*pa = *pb;
	*pb = tmp;
}

int main()
{
	int a = 10;
	int b = 20;
	//自定义函数，求两个数的较大值
	//函数的使用
	int max=get_max(a, b);
	printf("max=%d\n", max);
	max = get_max(100, 300);
	printf("max=%d\n", max);

	//自定义函数，交换整型变量的值
	printf("a=%d b=%d\n", a, b);
	//Swap1(a, b);                传值调用
	//调用函数
	Swap2(&a, &b);//实际参数      传址调用
	printf("a=%d b=%d\n", a, b);

	int a1 = 10;
	int* pa = &a1;//pa指针变量
	*pa = 20;//解引用操作
	printf("a1=%d\n", a1);
	return 0;
}
//自定义函数和库函数一样，有函数名，返回值类型和函数参数。但这些都是我们自己来设计。
//ret_type fun_name(paral,*)
//{
//	atatement;  语句项(函数体，交代的是函数的实现)
//}
//ret_type  返回类型
//fun_name  函数名
//para1     函数参数

//实际参数：
//         真实传给函数的参数，叫实参。实参可以是：常量，变量，表达式，函数等。无论实参是何种类型的量，
//         在进行函数调用时，他们都必须有确定的值，以便把这些值传送给形参。
//形式参数：
//         形式参数是指函数名后括号中的变量，因为形式参数只有在函数被调用的过程中才实例化（分配内存单元），所以叫形式参数。
//         形式参数当函数调用完成之后就自动销毁了，因此形式参数只在函数中有效。

//函数的调用：
//1.传值调用：函数的形参和实参分别占有不同内存块，对形参的修改不会影响实参
//2.地址调用：传址调用是把函数外部创建变量的内存地址传递给函数参数的一种调用函数的方式
//            这种传参方式可以让函数和函数外边的变量建立起真正的联系，也就是函数内部可以直接操作函数外部的变量